// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.domain;

import ar.edu.um.canarium.domain.Persona;
import ar.edu.um.canarium.domain.PersonaDataOnDemand;
import ar.edu.um.canarium.domain.Relacion;
import ar.edu.um.canarium.domain.RelacionDataOnDemand;
import ar.edu.um.canarium.service.RelacionService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect RelacionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RelacionDataOnDemand: @Component;
    
    private Random RelacionDataOnDemand.rnd = new SecureRandom();
    
    private List<Relacion> RelacionDataOnDemand.data;
    
    @Autowired
    PersonaDataOnDemand RelacionDataOnDemand.personaDataOnDemand;
    
    @Autowired
    RelacionService RelacionDataOnDemand.relacionService;
    
    public Relacion RelacionDataOnDemand.getNewTransientRelacion(int index) {
        Relacion obj = new Relacion();
        setIdSeguido(obj, index);
        setPersona(obj, index);
        return obj;
    }
    
    public void RelacionDataOnDemand.setIdSeguido(Relacion obj, int index) {
        Long idSeguido = new Integer(index).longValue();
        obj.setIdSeguido(idSeguido);
    }
    
    public void RelacionDataOnDemand.setPersona(Relacion obj, int index) {
        Persona persona = personaDataOnDemand.getRandomPersona();
        obj.setPersona(persona);
    }
    
    public Relacion RelacionDataOnDemand.getSpecificRelacion(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Relacion obj = data.get(index);
        Long id = obj.getId();
        return relacionService.findRelacion(id);
    }
    
    public Relacion RelacionDataOnDemand.getRandomRelacion() {
        init();
        Relacion obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return relacionService.findRelacion(id);
    }
    
    public boolean RelacionDataOnDemand.modifyRelacion(Relacion obj) {
        return false;
    }
    
    public void RelacionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = relacionService.findRelacionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Relacion' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Relacion>();
        for (int i = 0; i < 10; i++) {
            Relacion obj = getNewTransientRelacion(i);
            try {
                relacionService.saveRelacion(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
