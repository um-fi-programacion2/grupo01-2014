// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.domain;

import ar.edu.um.canarium.domain.Mensaje;
import ar.edu.um.canarium.domain.MensajeDataOnDemand;
import ar.edu.um.canarium.domain.Persona;
import ar.edu.um.canarium.domain.PersonaDataOnDemand;
import ar.edu.um.canarium.service.MensajeService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect MensajeDataOnDemand_Roo_DataOnDemand {
    
    declare @type: MensajeDataOnDemand: @Component;
    
    private Random MensajeDataOnDemand.rnd = new SecureRandom();
    
    private List<Mensaje> MensajeDataOnDemand.data;
    
    @Autowired
    PersonaDataOnDemand MensajeDataOnDemand.personaDataOnDemand;
    
    @Autowired
    MensajeService MensajeDataOnDemand.mensajeService;
    
    public Mensaje MensajeDataOnDemand.getNewTransientMensaje(int index) {
        Mensaje obj = new Mensaje();
        setDescripcion(obj, index);
        setFecha(obj, index);
        setPersona(obj, index);
        return obj;
    }
    
    public void MensajeDataOnDemand.setDescripcion(Mensaje obj, int index) {
        String descripcion = "descripcion_" + index;
        if (descripcion.length() > 140) {
            descripcion = descripcion.substring(0, 140);
        }
        obj.setDescripcion(descripcion);
    }
    
    public void MensajeDataOnDemand.setFecha(Mensaje obj, int index) {
        Date fecha = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setFecha(fecha);
    }
    
    public void MensajeDataOnDemand.setPersona(Mensaje obj, int index) {
        Persona persona = personaDataOnDemand.getRandomPersona();
        obj.setPersona(persona);
    }
    
    public Mensaje MensajeDataOnDemand.getSpecificMensaje(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Mensaje obj = data.get(index);
        Long id = obj.getId();
        return mensajeService.findMensaje(id);
    }
    
    public Mensaje MensajeDataOnDemand.getRandomMensaje() {
        init();
        Mensaje obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return mensajeService.findMensaje(id);
    }
    
    public boolean MensajeDataOnDemand.modifyMensaje(Mensaje obj) {
        return false;
    }
    
    public void MensajeDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = mensajeService.findMensajeEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Mensaje' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Mensaje>();
        for (int i = 0; i < 10; i++) {
            Mensaje obj = getNewTransientMensaje(i);
            try {
                mensajeService.saveMensaje(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
