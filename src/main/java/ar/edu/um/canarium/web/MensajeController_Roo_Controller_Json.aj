// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.web;

import ar.edu.um.canarium.domain.Mensaje;
import ar.edu.um.canarium.domain.Persona;
import ar.edu.um.canarium.web.MensajeController;
import java.util.Date;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect MensajeController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajeController.showJson(@PathVariable("id") Long id) {
        Mensaje mensaje = mensajeService.findMensaje(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (mensaje == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(mensaje.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajeController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Mensaje> result = mensajeService.findAllMensajes();
        return new ResponseEntity<String>(Mensaje.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> MensajeController.createFromJson(@RequestBody String json) {
        Mensaje mensaje = Mensaje.fromJsonToMensaje(json);
        mensajeService.saveMensaje(mensaje);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> MensajeController.createFromJsonArray(@RequestBody String json) {
        for (Mensaje mensaje: Mensaje.fromJsonArrayToMensajes(json)) {
            mensajeService.saveMensaje(mensaje);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> MensajeController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Mensaje mensaje = Mensaje.fromJsonToMensaje(json);
        if (mensajeService.updateMensaje(mensaje) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> MensajeController.deleteFromJson(@PathVariable("id") Long id) {
        Mensaje mensaje = mensajeService.findMensaje(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (mensaje == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        mensajeService.deleteMensaje(mensaje);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDescripcionLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajeController.jsonFindMensajesByDescripcionLike(@RequestParam("descripcion") String descripcion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Mensaje.toJsonArray(Mensaje.findMensajesByDescripcionLike(descripcion).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByFechaBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajeController.jsonFindMensajesByFechaBetween(@RequestParam("minFecha") @DateTimeFormat(style = "M-") Date minFecha, @RequestParam("maxFecha") @DateTimeFormat(style = "M-") Date maxFecha) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Mensaje.toJsonArray(Mensaje.findMensajesByFechaBetween(minFecha, maxFecha).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByFechaGreaterThan", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajeController.jsonFindMensajesByFechaGreaterThan(@RequestParam("fecha") @DateTimeFormat(style = "M-") Date fecha) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Mensaje.toJsonArray(Mensaje.findMensajesByFechaGreaterThan(fecha).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByFechaLessThan", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajeController.jsonFindMensajesByFechaLessThan(@RequestParam("fecha") @DateTimeFormat(style = "M-") Date fecha) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Mensaje.toJsonArray(Mensaje.findMensajesByFechaLessThan(fecha).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByPersona", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajeController.jsonFindMensajesByPersona(@RequestParam("persona") Persona persona) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Mensaje.toJsonArray(Mensaje.findMensajesByPersona(persona).getResultList()), headers, HttpStatus.OK);
    }
    
}
