// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.web;

import ar.edu.um.canarium.domain.Persona;
import ar.edu.um.canarium.domain.Sexo;
import ar.edu.um.canarium.service.MensajePrivadoService;
import ar.edu.um.canarium.service.MensajeService;
import ar.edu.um.canarium.service.PersonaService;
import ar.edu.um.canarium.service.RelacionService;
import ar.edu.um.canarium.service.RepublicadoService;
import ar.edu.um.canarium.service.UserService;
import ar.edu.um.canarium.web.PersonaController;
import java.io.UnsupportedEncodingException;
import java.util.Arrays;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect PersonaController_Roo_Controller {
    
    @Autowired
    PersonaService PersonaController.personaService;
    
    @Autowired
    MensajeService PersonaController.mensajeService;
    
    @Autowired
    MensajePrivadoService PersonaController.mensajePrivadoService;
    
    @Autowired
    RelacionService PersonaController.relacionService;
    
    @Autowired
    RepublicadoService PersonaController.republicadoService;
    
    @Autowired
    UserService PersonaController.userService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String PersonaController.create(@Valid Persona persona, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, persona);
            return "personae/create";
        }
        uiModel.asMap().clear();
        personaService.savePersona(persona);
        return "redirect:/personae/" + encodeUrlPathSegment(persona.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String PersonaController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Persona());
        return "personae/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String PersonaController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("persona", personaService.findPersona(id));
        uiModel.addAttribute("itemId", id);
        return "personae/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String PersonaController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("personae", personaService.findPersonaEntries(firstResult, sizeNo));
            float nrOfPages = (float) personaService.countAllPersonae() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("personae", personaService.findAllPersonae());
        }
        addDateTimeFormatPatterns(uiModel);
        return "personae/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String PersonaController.update(@Valid Persona persona, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, persona);
            return "personae/update";
        }
        uiModel.asMap().clear();
        personaService.updatePersona(persona);
        return "redirect:/personae/" + encodeUrlPathSegment(persona.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String PersonaController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, personaService.findPersona(id));
        return "personae/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String PersonaController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Persona persona = personaService.findPersona(id);
        personaService.deletePersona(persona);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/personae";
    }
    
    void PersonaController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("persona_fecha_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void PersonaController.populateEditForm(Model uiModel, Persona persona) {
        uiModel.addAttribute("persona", persona);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("mensajes", mensajeService.findAllMensajes());
        uiModel.addAttribute("mensajeprivadoes", mensajePrivadoService.findAllMensajePrivadoes());
        uiModel.addAttribute("relacions", relacionService.findAllRelacions());
        uiModel.addAttribute("republicadoes", republicadoService.findAllRepublicadoes());
        uiModel.addAttribute("sexoes", Arrays.asList(Sexo.values()));
        uiModel.addAttribute("users", userService.findAllUsers());
    }
    
    String PersonaController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
