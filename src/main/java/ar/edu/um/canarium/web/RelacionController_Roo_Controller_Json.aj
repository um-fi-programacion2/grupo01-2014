// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.web;

import ar.edu.um.canarium.domain.Persona;
import ar.edu.um.canarium.domain.Relacion;
import ar.edu.um.canarium.web.RelacionController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect RelacionController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RelacionController.showJson(@PathVariable("id") Long id) {
        Relacion relacion = relacionService.findRelacion(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (relacion == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(relacion.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RelacionController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Relacion> result = relacionService.findAllRelacions();
        return new ResponseEntity<String>(Relacion.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> RelacionController.createFromJson(@RequestBody String json) {
        Relacion relacion = Relacion.fromJsonToRelacion(json);
        relacionService.saveRelacion(relacion);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> RelacionController.createFromJsonArray(@RequestBody String json) {
        for (Relacion relacion: Relacion.fromJsonArrayToRelacions(json)) {
            relacionService.saveRelacion(relacion);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> RelacionController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Relacion relacion = Relacion.fromJsonToRelacion(json);
        if (relacionService.updateRelacion(relacion) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> RelacionController.deleteFromJson(@PathVariable("id") Long id) {
        Relacion relacion = relacionService.findRelacion(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (relacion == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        relacionService.deleteRelacion(relacion);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByIdSeguidoEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RelacionController.jsonFindRelacionsByIdSeguidoEquals(@RequestParam("idSeguido") Long idSeguido) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Relacion.toJsonArray(Relacion.findRelacionsByIdSeguidoEquals(idSeguido).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByIdSeguidoEqualsAndPersona", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RelacionController.jsonFindRelacionsByIdSeguidoEqualsAndPersona(@RequestParam("idSeguido") Long idSeguido, @RequestParam("persona") Persona persona) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Relacion.toJsonArray(Relacion.findRelacionsByIdSeguidoEqualsAndPersona(idSeguido, persona).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByPersona", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RelacionController.jsonFindRelacionsByPersona(@RequestParam("persona") Persona persona) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Relacion.toJsonArray(Relacion.findRelacionsByPersona(persona).getResultList()), headers, HttpStatus.OK);
    }
    
}
