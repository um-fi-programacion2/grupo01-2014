// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.web;

import ar.edu.um.canarium.domain.Configuracion;
import ar.edu.um.canarium.web.ConfiguracionController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect ConfiguracionController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ConfiguracionController.showJson(@PathVariable("id") Long id) {
        Configuracion configuracion = configuracionService.findConfiguracion(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (configuracion == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(configuracion.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ConfiguracionController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Configuracion> result = configuracionService.findAllConfiguracions();
        return new ResponseEntity<String>(Configuracion.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ConfiguracionController.createFromJson(@RequestBody String json) {
        Configuracion configuracion = Configuracion.fromJsonToConfiguracion(json);
        configuracionService.saveConfiguracion(configuracion);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> ConfiguracionController.createFromJsonArray(@RequestBody String json) {
        for (Configuracion configuracion: Configuracion.fromJsonArrayToConfiguracions(json)) {
            configuracionService.saveConfiguracion(configuracion);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> ConfiguracionController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Configuracion configuracion = Configuracion.fromJsonToConfiguracion(json);
        if (configuracionService.updateConfiguracion(configuracion) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> ConfiguracionController.deleteFromJson(@PathVariable("id") Long id) {
        Configuracion configuracion = configuracionService.findConfiguracion(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (configuracion == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        configuracionService.deleteConfiguracion(configuracion);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByAtributoLike", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> ConfiguracionController.jsonFindConfiguracionsByAtributoLike(@RequestParam("atributo") String atributo) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Configuracion.toJsonArray(Configuracion.findConfiguracionsByAtributoLike(atributo).getResultList()), headers, HttpStatus.OK);
    }
    
}
