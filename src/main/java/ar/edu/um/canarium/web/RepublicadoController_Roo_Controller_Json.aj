// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.web;

import ar.edu.um.canarium.domain.Mensaje;
import ar.edu.um.canarium.domain.Persona;
import ar.edu.um.canarium.domain.Republicado;
import ar.edu.um.canarium.web.RepublicadoController;
import java.util.Date;
import java.util.List;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect RepublicadoController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RepublicadoController.showJson(@PathVariable("id") Long id) {
        Republicado republicado = republicadoService.findRepublicado(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (republicado == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(republicado.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RepublicadoController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Republicado> result = republicadoService.findAllRepublicadoes();
        return new ResponseEntity<String>(Republicado.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    /*
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> RepublicadoController.createFromJson(@RequestBody String json) {
        Republicado republicado = Republicado.fromJsonToRepublicado(json);
        republicadoService.saveRepublicado(republicado);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }*/
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> RepublicadoController.createFromJsonArray(@RequestBody String json) {
        for (Republicado republicado: Republicado.fromJsonArrayToRepublicadoes(json)) {
            republicadoService.saveRepublicado(republicado);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> RepublicadoController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Republicado republicado = Republicado.fromJsonToRepublicado(json);
        if (republicadoService.updateRepublicado(republicado) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> RepublicadoController.deleteFromJson(@PathVariable("id") Long id) {
        Republicado republicado = republicadoService.findRepublicado(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (republicado == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        republicadoService.deleteRepublicado(republicado);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByFechaBetween", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RepublicadoController.jsonFindRepublicadoesByFechaBetween(@RequestParam("minFecha") @DateTimeFormat(style = "M-") Date minFecha, @RequestParam("maxFecha") @DateTimeFormat(style = "M-") Date maxFecha) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Republicado.toJsonArray(Republicado.findRepublicadoesByFechaBetween(minFecha, maxFecha).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMensaje", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RepublicadoController.jsonFindRepublicadoesByMensaje(@RequestParam("mensaje") Mensaje mensaje) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Republicado.toJsonArray(Republicado.findRepublicadoesByMensaje(mensaje).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByPersona", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> RepublicadoController.jsonFindRepublicadoesByPersona(@RequestParam("persona") Persona persona) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Republicado.toJsonArray(Republicado.findRepublicadoesByPersona(persona).getResultList()), headers, HttpStatus.OK);
    }
    
}
