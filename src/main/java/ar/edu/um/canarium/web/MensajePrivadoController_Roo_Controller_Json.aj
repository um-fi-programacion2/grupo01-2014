// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.web;

import ar.edu.um.canarium.domain.MensajePrivado;
import ar.edu.um.canarium.domain.Persona;
import ar.edu.um.canarium.web.MensajePrivadoController;
import java.util.List;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect MensajePrivadoController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajePrivadoController.showJson(@PathVariable("id") Long id) {
        MensajePrivado mensajePrivado = mensajePrivadoService.findMensajePrivado(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (mensajePrivado == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(mensajePrivado.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajePrivadoController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<MensajePrivado> result = mensajePrivadoService.findAllMensajePrivadoes();
        return new ResponseEntity<String>(MensajePrivado.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> MensajePrivadoController.createFromJson(@RequestBody String json) {
        MensajePrivado mensajePrivado = MensajePrivado.fromJsonToMensajePrivado(json);
        mensajePrivadoService.saveMensajePrivado(mensajePrivado);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> MensajePrivadoController.createFromJsonArray(@RequestBody String json) {
        for (MensajePrivado mensajePrivado: MensajePrivado.fromJsonArrayToMensajePrivadoes(json)) {
            mensajePrivadoService.saveMensajePrivado(mensajePrivado);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> MensajePrivadoController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        MensajePrivado mensajePrivado = MensajePrivado.fromJsonToMensajePrivado(json);
        if (mensajePrivadoService.updateMensajePrivado(mensajePrivado) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> MensajePrivadoController.deleteFromJson(@PathVariable("id") Long id) {
        MensajePrivado mensajePrivado = mensajePrivadoService.findMensajePrivado(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (mensajePrivado == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        mensajePrivadoService.deleteMensajePrivado(mensajePrivado);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByIdPersonaDestinoEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajePrivadoController.jsonFindMensajePrivadoesByIdPersonaDestinoEquals(@RequestParam("idPersonaDestino") Long idPersonaDestino) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(MensajePrivado.toJsonArray(MensajePrivado.findMensajePrivadoesByIdPersonaDestinoEquals(idPersonaDestino).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByPersona", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> MensajePrivadoController.jsonFindMensajePrivadoesByPersona(@RequestParam("persona") Persona persona) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(MensajePrivado.toJsonArray(MensajePrivado.findMensajePrivadoesByPersona(persona).getResultList()), headers, HttpStatus.OK);
    }
    
}
