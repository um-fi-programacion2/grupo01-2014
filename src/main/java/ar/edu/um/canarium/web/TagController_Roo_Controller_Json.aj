// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.web;

import ar.edu.um.canarium.domain.Mensaje;
import ar.edu.um.canarium.domain.Tag;
import ar.edu.um.canarium.web.TagController;
import java.util.List;
import java.util.Set;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect TagController_Roo_Controller_Json {
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TagController.showJson(@PathVariable("id") Long id) {
        Tag tag = tagService.findTag(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (tag == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(tag.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TagController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<Tag> result = tagService.findAllTags();
        return new ResponseEntity<String>(Tag.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> TagController.createFromJson(@RequestBody String json) {
        Tag tag = Tag.fromJsonToTag(json);
        tagService.saveTag(tag);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> TagController.createFromJsonArray(@RequestBody String json) {
        for (Tag tag: Tag.fromJsonArrayToTags(json)) {
            tagService.saveTag(tag);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> TagController.updateFromJson(@RequestBody String json, @PathVariable("id") Long id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        Tag tag = Tag.fromJsonToTag(json);
        if (tagService.updateTag(tag) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> TagController.deleteFromJson(@PathVariable("id") Long id) {
        Tag tag = tagService.findTag(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (tag == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        tagService.deleteTag(tag);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByDescripcionEquals", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TagController.jsonFindTagsByDescripcionEquals(@RequestParam("descripcion") String descripcion) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Tag.toJsonArray(Tag.findTagsByDescripcionEquals(descripcion).getResultList()), headers, HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByMensajes", headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> TagController.jsonFindTagsByMensajes(@RequestParam("mensajes") Set<Mensaje> mensajes) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        return new ResponseEntity<String>(Tag.toJsonArray(Tag.findTagsByMensajes(mensajes).getResultList()), headers, HttpStatus.OK);
    }
    
}
