// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.domain;

import ar.edu.um.canarium.domain.Mensaje;
import ar.edu.um.canarium.domain.Persona;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Mensaje_Roo_Finder {
    
    public static TypedQuery<Mensaje> Mensaje.findMensajesByDescripcionLike(String descripcion) {
        if (descripcion == null || descripcion.length() == 0) throw new IllegalArgumentException("The descripcion argument is required");
        descripcion = descripcion.replace('*', '%');
        if (descripcion.charAt(0) != '%') {
            descripcion = "%" + descripcion;
        }
        if (descripcion.charAt(descripcion.length() - 1) != '%') {
            descripcion = descripcion + "%";
        }
        EntityManager em = Mensaje.entityManager();
        TypedQuery<Mensaje> q = em.createQuery("SELECT o FROM Mensaje AS o WHERE LOWER(o.descripcion) LIKE LOWER(:descripcion)", Mensaje.class);
        q.setParameter("descripcion", descripcion);
        return q;
    }
    
    public static TypedQuery<Mensaje> Mensaje.findMensajesByFechaBetween(Date minFecha, Date maxFecha) {
        if (minFecha == null) throw new IllegalArgumentException("The minFecha argument is required");
        if (maxFecha == null) throw new IllegalArgumentException("The maxFecha argument is required");
        EntityManager em = Mensaje.entityManager();
        TypedQuery<Mensaje> q = em.createQuery("SELECT o FROM Mensaje AS o WHERE o.fecha BETWEEN :minFecha AND :maxFecha", Mensaje.class);
        q.setParameter("minFecha", minFecha);
        q.setParameter("maxFecha", maxFecha);
        return q;
    }
    
    public static TypedQuery<Mensaje> Mensaje.findMensajesByFechaGreaterThan(Date fecha) {
        if (fecha == null) throw new IllegalArgumentException("The fecha argument is required");
        EntityManager em = Mensaje.entityManager();
        TypedQuery<Mensaje> q = em.createQuery("SELECT o FROM Mensaje AS o WHERE o.fecha > :fecha", Mensaje.class);
        q.setParameter("fecha", fecha);
        return q;
    }
    
    public static TypedQuery<Mensaje> Mensaje.findMensajesByFechaLessThan(Date fecha) {
        if (fecha == null) throw new IllegalArgumentException("The fecha argument is required");
        EntityManager em = Mensaje.entityManager();
        TypedQuery<Mensaje> q = em.createQuery("SELECT o FROM Mensaje AS o WHERE o.fecha < :fecha", Mensaje.class);
        q.setParameter("fecha", fecha);
        return q;
    }
    
    public static TypedQuery<Mensaje> Mensaje.findMensajesByPersona(Persona persona) {
        if (persona == null) throw new IllegalArgumentException("The persona argument is required");
        EntityManager em = Mensaje.entityManager();
        TypedQuery<Mensaje> q = em.createQuery("SELECT o FROM Mensaje AS o WHERE o.persona = :persona", Mensaje.class);
        q.setParameter("persona", persona);
        return q;
    }
    
}
