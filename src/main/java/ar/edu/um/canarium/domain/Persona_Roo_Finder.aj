// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.domain;

import ar.edu.um.canarium.domain.Persona;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Persona_Roo_Finder {
    
    public static TypedQuery<Persona> Persona.findPersonaeByActivoNot(Boolean activo) {
        if (activo == null) throw new IllegalArgumentException("The activo argument is required");
        EntityManager em = Persona.entityManager();
        TypedQuery<Persona> q = em.createQuery("SELECT o FROM Persona AS o WHERE o.activo IS NOT :activo", Persona.class);
        q.setParameter("activo", activo);
        return q;
    }
    
    public static TypedQuery<Persona> Persona.findPersonaeByApellidoLike(String apellido) {
        if (apellido == null || apellido.length() == 0) throw new IllegalArgumentException("The apellido argument is required");
        apellido = apellido.replace('*', '%');
        if (apellido.charAt(0) != '%') {
            apellido = "%" + apellido;
        }
        if (apellido.charAt(apellido.length() - 1) != '%') {
            apellido = apellido + "%";
        }
        EntityManager em = Persona.entityManager();
        TypedQuery<Persona> q = em.createQuery("SELECT o FROM Persona AS o WHERE LOWER(o.apellido) LIKE LOWER(:apellido)", Persona.class);
        q.setParameter("apellido", apellido);
        return q;
    }
    
    public static TypedQuery<Persona> Persona.findPersonaeByEmailLike(String email) {
        if (email == null || email.length() == 0) throw new IllegalArgumentException("The email argument is required");
        email = email.replace('*', '%');
        if (email.charAt(0) != '%') {
            email = "%" + email;
        }
        if (email.charAt(email.length() - 1) != '%') {
            email = email + "%";
        }
        EntityManager em = Persona.entityManager();
        TypedQuery<Persona> q = em.createQuery("SELECT o FROM Persona AS o WHERE LOWER(o.email) LIKE LOWER(:email)", Persona.class);
        q.setParameter("email", email);
        return q;
    }
    
    public static TypedQuery<Persona> Persona.findPersonaeByPasswordEquals(String password) {
        if (password == null || password.length() == 0) throw new IllegalArgumentException("The password argument is required");
        EntityManager em = Persona.entityManager();
        TypedQuery<Persona> q = em.createQuery("SELECT o FROM Persona AS o WHERE o.password = :password", Persona.class);
        q.setParameter("password", password);
        return q;
    }
    
    public static TypedQuery<Persona> Persona.findPersonaeByUsuarioEquals(String usuario) {
        if (usuario == null || usuario.length() == 0) throw new IllegalArgumentException("The usuario argument is required");
        EntityManager em = Persona.entityManager();
        TypedQuery<Persona> q = em.createQuery("SELECT o FROM Persona AS o WHERE o.usuario = :usuario", Persona.class);
        q.setParameter("usuario", usuario);
        return q;
    }
    
}
