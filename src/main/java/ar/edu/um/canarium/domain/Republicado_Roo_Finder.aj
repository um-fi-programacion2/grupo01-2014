// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package ar.edu.um.canarium.domain;

import ar.edu.um.canarium.domain.Mensaje;
import ar.edu.um.canarium.domain.Persona;
import ar.edu.um.canarium.domain.Republicado;
import java.util.Date;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Republicado_Roo_Finder {
    
    public static TypedQuery<Republicado> Republicado.findRepublicadoesByFechaBetween(Date minFecha, Date maxFecha) {
        if (minFecha == null) throw new IllegalArgumentException("The minFecha argument is required");
        if (maxFecha == null) throw new IllegalArgumentException("The maxFecha argument is required");
        EntityManager em = Republicado.entityManager();
        TypedQuery<Republicado> q = em.createQuery("SELECT o FROM Republicado AS o WHERE o.fecha BETWEEN :minFecha AND :maxFecha", Republicado.class);
        q.setParameter("minFecha", minFecha);
        q.setParameter("maxFecha", maxFecha);
        return q;
    }
    
    public static TypedQuery<Republicado> Republicado.findRepublicadoesByMensaje(Mensaje mensaje) {
        if (mensaje == null) throw new IllegalArgumentException("The mensaje argument is required");
        EntityManager em = Republicado.entityManager();
        TypedQuery<Republicado> q = em.createQuery("SELECT o FROM Republicado AS o WHERE o.mensaje = :mensaje", Republicado.class);
        q.setParameter("mensaje", mensaje);
        return q;
    }
    
    public static TypedQuery<Republicado> Republicado.findRepublicadoesByPersona(Persona persona) {
        if (persona == null) throw new IllegalArgumentException("The persona argument is required");
        EntityManager em = Republicado.entityManager();
        TypedQuery<Republicado> q = em.createQuery("SELECT o FROM Republicado AS o WHERE o.persona = :persona", Republicado.class);
        q.setParameter("persona", persona);
        return q;
    }
    
}
